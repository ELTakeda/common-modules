<?php

use Drupal\taxonomy\Entity\Term;
use Drupal\node\Entity\Node;
use Drupal\Core\Url;
use Drupal\views\ViewExecutable;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
/**
 * Implements hook_theme().
 */

 

function spotme_events_theme($existing, $type, $theme, $path){
  $theme = array();
  $theme['node__events_page'] = array(
    'base hook' => 'page',
    'render element' => 'elements',
  );
  $theme['node__single_event'] = array(
    'base hook' => 'page',
    'render element' => 'elements',
  ); 
  $theme['block__views_block__home_page_em_events_view_block_1'] = array(
    'template' => 'spotme-custom-webinar-list-block',
    'variables' => 'elements',
  );  
  $theme['spotme_custom_webinar_list_block'] = array(
    'base hook' => 'block',
    'render element' => [
        'data' => [],
      ],
  );
  $theme['spotme_custom_webinar_list_block']= array(
    'render element' => 'elements',
    'base hook' => 'views_view',
    'template' => 'views/views-view--webinar-event--past-event-page',
  );
  $theme['views_view__webinar_event__past_event_page']= array(
    'render element' => 'elements',
    'base hook' => 'views_view',
    'template' => 'views/views-view--webinar-event--past-event-page',
  );
  $theme['views_view__webinar_event__past_event_block']= array(
    'render element' => 'elements',
    'base hook' => 'views_view',
    'template' => 'views/views-view--webinar-event--past-event-block',
  );
  $theme['views_view__webinar_event__new_arrival_page']= array(
    'render element' => 'elements',
    'base hook' => 'views_view',
    'template' => 'views/views-view--webinar-event--new-arrival-page',
  );
  $theme['views_view__webinar_event__new_arrival_block']= array(
    'render element' => 'elements',
    'base hook' => 'views_view',
    'template' => 'views/views-view--webinar-event--new-arrival-block',
  );
  $theme['views_view__webinar_event__live_event_page']= array(
    'render element' => 'elements',
    'base hook' => 'views_view',
    'template' => 'views/views-view--webinar-event--live-event-page',
  );
  $theme['views_view__webinar_event__live_event_block']= array(
    'render element' => 'elements',
    'base hook' => 'views_view',
    'template' => 'views/views-view--webinar-event--live-event-block',
  );
  $theme['views_view__webinar_event__coming_soon_event_page']= array(
    'render element' => 'elements',
    'base hook' => 'views_view',
    'template' => 'views/views-view--webinar-event--coming-soon-event-page',
  );
  $theme['views_view__webinar_event__coming_soon_event_block']= array(
    'render element' => 'elements',
    'base hook' => 'views_view',
    'template' => 'views/views-view--webinar-event--coming-soon-event-block',
  );
  $theme['views_view_table__webinar_event__past_event_page']= array(
    'render element' => 'elements',
    'base hook' => 'views_view',
    'template' => 'views/views-view-table--webinar-event--past-event-page',
  );
  $theme['views_view_table__webinar_event__past_event_block']= array(
    'render element' => 'elements',
    'base hook' => 'views_view',
    'template' => 'views/views-view-table--webinar-event--past-event-block',
  );
  $theme['views_view_table__webinar_event__new_arrival_page']= array(
    'render element' => 'elements',
    'base hook' => 'views_view',
    'template' => 'views/views-view-table--webinar-event--new-arrival-page',
  );
  $theme['views_view_table__webinar_event__new_arrival_block']= array(
    'render element' => 'elements',
    'base hook' => 'views_view',
    'template' => 'views/views-view-table--webinar-event--new-arrival-block',
  );
  $theme['views_view_table__webinar_event__live_event_page']= array(
    'render element' => 'elements',
    'base hook' => 'views_view',
    'template' => 'views/views-view-table--webinar-event--live-event-page',
  );
  $theme['views_view_table__webinar_event__live_event_block']= array(
    'render element' => 'elements',
    'base hook' => 'views_view',
    'template' => 'views/views-view-table--webinar-event--live-event-block',
  );
  $theme['views_view_table__webinar_event__coming_soon_event_page']= array(
    'render element' => 'elements',
    'base hook' => 'views_view',
    'template' => 'views/views-view-table--webinar-event--coming-soon-event-page',
  );
  $theme['views_view_table__webinar_event__coming_soon_event_block']= array(
    'render element' => 'elements',
    'base hook' => 'views_view',
    'template' => 'views/views-view-table--webinar-event--coming-soon-event-block',
  );
  $theme['node__event__full']= array(
    'render element' => 'elements',
    'base hook' => 'node',
    'template' => 'node/node--event--full',
  );
  return $theme;
}

/**
 * Implements hook_preprocess().
 */

function spotme_events_preprocess_block(&$variables){
    if($variables['plugin_id'] == 'views_block:home_page_em_events_view-block_1'){

        //Get all events pages if there are multiple
        $events_pages_ids = \Drupal::entityQuery('node')->accessCheck(FALSE)->condition('type','events_page')->execute();
        $last_page_id = end($events_pages_ids);  //get last page id 
        $alias = '#';

        //Get URL if there are existing pages
        if(!empty($last_page_id)){
           $alias = ltrim(\Drupal::service('path_alias.manager')->getAliasByPath('/node/'.$last_page_id), '/');
        }

        $variables['events_page_url'] = $alias; 
    }
}

function spotme_events_preprocess(&$variables) {
    // Get the data for the field labels
    $config = \Drupal::config('event_registration.settings');

    // Set the data to a variable usable accross the site
    $variables['event_registration_login_url'] = $config->get('event_registration_login_url');
    $variables['event_registration_event_colour'] = $config->get('event_registration_event_colour');
    $variables['event_registration_stakeholder_email'] = $config->get('event_registration_stakeholder_email');
   
 }

function spotme_events_preprocess_node__events_page(&$variables) {
    
    //Get node
    $node = \Drupal::routeMatch()->getParameter('node');

    if (!empty($node)) {
        $content_type = \Drupal::routeMatch()->getParameter('node')->bundle();
        $allowed_machine_names = array('events_page');

        if(in_array($content_type, $allowed_machine_names)){
            $languagecode = \Drupal::languageManager()->getCurrentLanguage()->getId();

            //Get all single events
            $event_ids = \Drupal::entityQuery('node')->accessCheck(FALSE)->condition('type','single_event')->execute();        
            $single_events = Node::loadMultiple($event_ids);           
        
            $current_time = time();
            $translatedEvents = [];
            foreach($single_events as $event){

                $node_id = $event->id();

                //Skip if start/end date are empty
                if(empty($event->get('field_se_start_date')->value) || empty($event->get('field_se_end_date')->value)){
                    continue;
                }

                //Event times
                $start_time = $event->get('field_se_start_date')->date->getTimestamp();
                $end_time = $event->get('field_se_end_date')->date->getTimestamp();

                //Node link
                $node_url = ltrim(\Drupal::service('path_alias.manager')->getAliasByPath('/node/'.$node_id), '/');
                $event->__set('field_se_node_url', $node_url);

                //Event tags
                if(!empty($event->get('field_se_event_tags'))){
                    $tag_vals = $event->get('field_se_event_tags')->getValue();
                    $tag_names = '';
    
                    //If there's tags, make them into string to use
                    if(!empty($tag_vals)){
                        foreach($tag_vals as $key => $val){
                            $term_id = $val['target_id'];
                            $term_name = Term::load($term_id)->get('name')->value;
                            $tag_names .= $term_name.' ';
                        }
                        $event->__set('field_se_tag_names', $tag_names);
                    }
                }
                 //Time remaining to register in seconds
                 $closing_time_secs = $event->get('field_se_closing_date')->date->getTimestamp() - $current_time;

                 //Calculating closing time
 
                 $days_remaining_register = round( round( $closing_time_secs /3600 ) / 24);
                 //Check if there are remaining days for registering
 
                 if($closing_time_secs <= 0){
                    $days_remaining_register = 'Closed';
                    $disable_btn = true; //disable register button
                }else{
                    $days_remaining_register = $days_remaining_register.' days';
                    $disable_btn = false;
                }

                $event->__set('field_se_days_remaining_register', $days_remaining_register);
                $event->__set('field_se_disable_btn', $disable_btn);

                //Field for format
                $time_format = $event->get('field_se_date_time_formats')->value;

                //Time formats depending on the field
                if($time_format == 'mdy_hm'){
                    //Mothn/Day/Year Hour:Min
                    $start_time_shown = date('m/d/Y H:i' ,$start_time);
                }elseif($time_format == 'ymd_hm'){
                    //Year/Month/Day Hour:Min
                    $start_time_shown = date('Y/m/d H:i' ,$start_time);
                }else{
                    //Day/Month/Year  Hour:Min
                    $start_time_shown = date('d/m/Y H:i' ,$start_time);
                }
                
                $event->__set('field_se_start_time_shown', $start_time_shown);
                //Check if user is registered
                $user_id = \Drupal::currentUser()->id();
                $database = \Drupal::database();
                $field_event_id = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($event->get('field_se_event_id')->getValue());

                $result = $database->select('event_registration', 'ev')
                    ->fields('ev')
                    ->condition('user_id', $user_id)
                    ->condition('event_id', $field_event_id)
                    ->execute()
                    ->fetchAll();

                if(count($result) > 0){
                    $is_registered = 'yes';
    
                    $takeda_enterprise_id = $result[0]->takeda_id;
                    $customer_country_code = $result[0]->country_code;
                    $spotme_url_live = $result[0]->spotme_url;
                }else {
                    $is_registered = 'no';
    
                    $takeda_enterprise_id = '';
                    $customer_country_code = '';
                    $spotme_url_live = '';
                }

                $event->__set('field_se_is_registered', $is_registered);
            

                //Conditions for events
                $event_type_time = '';
                if ($current_time > $end_time){
                    //Past event
                    $event_type_time = 'past';

                } elseif($current_time > $start_time && $current_time < $end_time){
                    //Live event
                    $event_type_time = 'live';

                } elseif($current_time < $start_time) {
                    //Future event
                    $event_type_time = 'future';
                }
                $event->__set('event_type_time', $event_type_time);
            

                $func_type = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($event->get('field_se_button_functionality')->getValue());

                //Get Live link for spotme
                if($is_registered == 'yes' && $func_type == 'spotme' && $event_type_time == 'live' && empty($spotme_url_live) && !empty($takeda_enterprise_id)){
                    $spotme_url_query = \Drupal::service('spotme_events.curl_functions')->getSpotmeLiveURL($field_event_id, $takeda_enterprise_id, $customer_country_code);

                    if(!empty($spotme_url_query)){
                        $spotme_url_live = $spotme_url_query->activityLink;

                        $database->update('event_registration')
                            ->fields(array('spotme_url' => $spotme_url_live))
                            ->condition('event_id', $field_event_id)
                            ->condition('user_id', $user_id)
                            ->execute();
                    }             
                }

                if(empty($spotme_url_live)){
                    $spotme_url_live = '#';
                }

                $event->__set('spotme_url_live', $spotme_url_live);

                //Get attendee status from CRM
                $registered_statuses = array('Invited', 'Show', 'No show');
                $crm_registered = 'no';
                
                if(!empty($takeda_enterprise_id)){
                    $attendee_stat_query = \Drupal::service('spotme_events.curl_functions')->getAtendeeStatus($field_event_id, $takeda_enterprise_id, $customer_country_code);

                    if(!empty($attendee_stat_query)){
                        $attendee_status = $attendee_stat_query->attendeeStatus;

                        if(in_array($attendee_status,  $registered_statuses)){
                            $crm_registered = 'yes';
                        }
                    }
                }

                $event->__set('crm_registered', $crm_registered);                

                //translate events
                if ($event->hasTranslation($languagecode)) {
                    $event = $event->getTranslation($languagecode);
                    $translatedEvents[] = $event;
                }
            }
            if (empty($translatedEvents)) {
                $translatedEvents = [];
            }
            //Single events
            $variables['all_events'] = $translatedEvents;  

            //Content fields
            $variables['title'] = $node->getTitle();
            $variables['field_ep_subtitle'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_ep_subtitle')->getValue());
            $variables['field_ep_lf_all_events'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_ep_lf_all_events')->getValue());
            $variables['field_ep_lf_future_events'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_ep_lf_future_events')->getValue());
            $variables['field_ep_lf_live_events'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_ep_lf_live_events')->getValue());
            $variables['field_ep_lf_past_events'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_ep_lf_past_events')->getValue());
            $variables['field_ep_lf_online_offline'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_ep_lf_online_offline')->getValue());
            $variables['field_ep_lf_online'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_ep_lf_online')->getValue());
            $variables['field_ep_lf_offline'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_ep_lf_offline')->getValue());
            $variables['field_ep_lf_my_events'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_ep_lf_my_events')->getValue());
            $variables['field_ep_lb_next'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_ep_lb_next')->getValue());
            $variables['field_ep_lb_previous'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_ep_lb_previous')->getValue());

            //Cache
            $variables['#cache']['max-age'] = 0;
        }
    } 
}

function spotme_events_preprocess_node__single_event(&$variables) { 
    $languagecode = \Drupal::languageManager()->getCurrentLanguage()->getId();

    //Get node
    $node = $variables['node'];

    //get active language code of the node
    $activeNodeLangCode = \Drupal::service('spotme_events.custom_functions')->getProtectedValue($node, 'activeLangcode');

    //get default language code
    $defaultNodeLangCode = \Drupal::service('spotme_events.custom_functions')->getProtectedValue($node, 'defaultLangcode');

    if ($activeNodeLangCode === 'x-default') {
        $activeNodeLangCode = $defaultNodeLangCode;
    }
    //We don't need to load the event container if there are no values
    $variables['show_node'] = false;

    //show only events that have language code equal to main page language code
    if ($node && $activeNodeLangCode === $languagecode) {
        $content_type = $node->bundle();
        $variables['show_node'] = true;
        $allowed_machine_names = array('single_event');

        if(in_array($content_type, $allowed_machine_names)){

            //Times in UNIX timestamp
            $start_time = $node->get('field_se_start_date')->date->getTimestamp();
            $end_time = $node->get('field_se_end_date')->date->getTimestamp();
            $current_time = time();

            //Calculating Running time
            $running_time = round(($end_time - $start_time) / 3600);

            //Time remaining to register in seconds
            $closing_time_secs = $node->get('field_se_closing_date')->date->getTimestamp() - $current_time;

            //Calculating closing time
            $days_remaining_register = round( round( $closing_time_secs /3600 ) / 24);//Check if there are remaining days for registering

            if($closing_time_secs <= 0){
                $days_remaining_register = 'Closed';
                $disable_btn = true; //disable register button
            }else{
                $days_remaining_register = $days_remaining_register.' days';
                $disable_btn = false;
            }

            //Sort into live/future/past event
            if($current_time > $end_time){
                //Past event
                $event_type_time = 'past';
            }elseif($current_time > $start_time && $current_time < $end_time){
                //Live event
                $event_type_time = 'live';
            }elseif($current_time < $start_time){
                //Future event
                $event_type_time = 'future';
            }else{
                $event_type_time = 'No data';
            }

            $time_format = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_se_date_time_formats')->getValue());

            //Time formats depending on the field
            if($time_format == 'mdy_hm'){
                //Mothn/Day/Year Hour:Min
                $start_time = date('m/d/Y H:i' ,$start_time);
            }elseif($time_format == 'ymd_hm'){
                //Year/Month/Day Hour:Min
                $start_time = date('Y/m/d H:i' ,$start_time);
            }else{
                //Day/Month/Year  Hour:Min
                $start_time = date('d/m/Y H:i' ,$start_time);
            }

            //Event tags
            $event_tags_val = $node->get('field_se_event_tags')->getValue();
            $event_tags = '';

            //If there's tags, make them into string to use
            if(!empty($event_tags_val)){
                foreach($event_tags_val as $key => $val){
                    $term_id = $val['target_id'];
                    $term_name = \Drupal\taxonomy\Entity\Term::load($term_id)->get('name')->value;
                    $event_tags .= $term_name.' ';
                }
            }

            //Check if user is registered
            $user_id = \Drupal::currentUser()->id();
            $database = \Drupal::database();
            $field_event_id = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_se_event_id')->getValue());

            $result = $database->select('event_registration', 'ev')
                ->fields('ev')
                ->condition('user_id', $user_id)
                ->condition('event_id', $field_event_id)
                ->execute()
                ->fetchAll();

            if(count($result) > 0){
                $is_registered = 'yes';

                $takeda_enterprise_id = $result[0]->takeda_id;
                $customer_country_code = $result[0]->country_code;
                $spotme_url_live = $result[0]->spotme_url;
            }else {
                $is_registered = 'no';

                $takeda_enterprise_id = '';
                $customer_country_code = '';
                $spotme_url_live = '';
            }

            $func_type = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_se_button_functionality')->getValue()); //button functionality types
            
            //Get Live link for spotme
            if($is_registered == 'yes' && $func_type == 'spotme' && $event_type_time == 'live' && empty($spotme_url_live) && !empty($takeda_enterprise_id)){
                $spotme_url_query = \Drupal::service('spotme_events.curl_functions')->getSpotmeLiveURL($field_event_id, $takeda_enterprise_id, $customer_country_code);

                if(!empty($spotme_url_query)){
                    $spotme_url_live = $spotme_url_query->activityLink;

                    $database->update('event_registration')
                        ->fields(array('spotme_url' => $spotme_url_live))
                        ->condition('event_id', $field_event_id)
                        ->condition('user_id', $user_id)
                        ->execute();
                }             
            }

            if(empty($spotme_url_live)){
                $spotme_url_live = '#';
            }
        
            //Content fields
            $variables['event_id'] = $node->id();
            $variables['export_to_ics_url'] = Url::fromRoute('spotme_events.export_to_ics');
            $variables['title'] = $node->getTitle();
            $variables['field_se_start_date'] =  $start_time;
            $variables['field_se_end_date'] = date('d/m/Y H:i' ,$end_time);
            $variables['running_time'] = $running_time;
            $variables['days_remaining_register'] = $days_remaining_register;
            $variables['event_type_time'] = $event_type_time;
            $variables['func_type'] = $func_type;
            $variables['is_registered'] = $is_registered;
            $variables['disable_btn'] = $disable_btn;
            $variables['spotme_url_live'] = $spotme_url_live;
            $variables['field_se_event_tags'] = trim($event_tags);
            $variables['field_se_teaser_description'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_se_teaser_description')->getValue());
            $variables['field_se_btn_label_going'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_se_btn_label_going')->getValue());
            $variables['field_se_btn_label_join'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_se_btn_label_join')->getValue());
            $variables['field_se_btn_label_register'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_se_btn_label_register')->getValue());
            $variables['field_se_country_code'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_se_country_code')->getValue());
            $variables['field_se_description'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_se_description')->getValue());
            $variables['field_se_event_id'] = $field_event_id;
            $variables['field_se_place'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_se_place')->getValue());
            $variables['field_se_type'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_se_type')->getValue());
            $variables['field_se_speaker_name'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_se_speaker_name')->getValue());
            $variables['field_se_link_external'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_se_link_external')->getValue());
            $variables['field_se_button_functionality'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_se_button_functionality')->getValue());
            $variables['field_se_label_closing_date'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_se_label_closing_date')->getValue());
            $variables['field_se_label_reg_close'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_se_label_reg_close')->getValue());
            $variables['field_se_label_run_time'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_se_label_run_time')->getValue());
            $variables['field_se_label_when'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_se_label_when')->getValue());
            $variables['field_se_label_where'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_se_label_where')->getValue());
            $variables['field_se_label_read_more'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_se_label_read_more')->getValue()); 
            $variables['field_se_label_download_ics'] = \Drupal::service('spotme_events.custom_functions')->getValueFromArray($node->get('field_se_label_download_ics')->getValue()); 

            //Cache
            $variables['#cache']['max-age'] = 0;
        }
    }
}

 /**
 * Pre-process for views.
 */

function spotme_events_views_pre_render(\Drupal\views\ViewExecutable $view) {
    if (isset($view) && $view->storage->id() == 'home_page_em_events_view') {
        
        $new_order_arr = array(); //New array that will display the end results
        $single_events = $view->result; //Data for the events
        $current_time = time(); //Current time used to sort
        $event_restriction = 3; //Number of events shown in the view

        //Live events sort
        foreach($single_events as $events){
            
            $event_values = \Drupal::service('spotme_events.custom_functions')->getProtectedValue($events->_entity, 'values');

            $start_date = $event_values['field_se_start_date']['x-default'][0]['value'] ? strtotime($event_values['field_se_start_date']['x-default'][0]['value']) : '0';
            $end_date = $event_values['field_se_start_date']['x-default'][0]['value'] ? strtotime($event_values['field_se_end_date']['x-default'][0]['value']) : '0';
            

            if($current_time > $start_date && $current_time < $end_date){
                array_push($new_order_arr, $events);

                if(count($new_order_arr) >= $event_restriction){
                    break;
                }
            }
        }

        //Future events sort
        if(count($new_order_arr) < $event_restriction){
            foreach($single_events as $events){
            
                $event_values = \Drupal::service('spotme_events.custom_functions')->getProtectedValue($events->_entity, 'values');
    
                $start_date = $event_values['field_se_start_date']['x-default'][0]['value'] ? strtotime($event_values['field_se_start_date']['x-default'][0]['value']) : '0';
                $end_date = $event_values['field_se_start_date']['x-default'][0]['value'] ? strtotime($event_values['field_se_end_date']['x-default'][0]['value']) : '0';
                
    
                if($current_time < $start_date && $current_time < $end_date){
                    array_push($new_order_arr, $events);

                    if(count($new_order_arr) >= $event_restriction){
                        break;
                    }
                }
            }
        }

        //Past event sort
        if(count($new_order_arr) < $event_restriction){
            foreach($single_events as $events){
            
                $event_values = \Drupal::service('spotme_events.custom_functions')->getProtectedValue($events->_entity, 'values');
    
                $start_date = $event_values['field_se_start_date']['x-default'][0]['value'] ? strtotime($event_values['field_se_start_date']['x-default'][0]['value']) : '0';
                $end_date = $event_values['field_se_start_date']['x-default'][0]['value'] ? strtotime($event_values['field_se_end_date']['x-default'][0]['value']) : '0';
                
    
                if($current_time > $start_date && $current_time > $end_date){
                    array_push($new_order_arr, $events);

                    if(count($new_order_arr) >= $event_restriction){
                        break;
                    }
                }
            }
        }

        $view->result = $new_order_arr;
    }
    if ($view->id() == 'webinar_event') {
        $view->element['#attached']['library'][] = 'spotme_events/main-styles';
      }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function spotme_events_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
    
    //Conditional visibility
    //limits only for one content type
    if($context == 'node_single_event_edit_form' || $context == 'node_single_event_form'){

        define('HIDDEN_VAL', 'junk_value');

        $selector = 'select[name="field_se_button_functionality"]'; //selector machine name here
        
        $element['field_se_event_id']['#states'] = [
            'visible' => [
                $selector => [
                    ['value' => 'spotme'],
                    ['value' => 'teams'],
                ],
            ],
            'hidden' => [
                $selector => ['value' => HIDDEN_VAL],
            ],
        ];
        
        $element['field_se_link_external']['#states'] = [
            'visible' => [
                $selector => ['value' => 'link'],
            ],
            'hidden' => [
                $selector => ['value' => HIDDEN_VAL],
            ],
        ];

    }

    // Conditional required fields
    //limits to one content type
    if($context == 'node_single_event_edit_form' || $context == 'node_single_event_form') {
        
        $selector = 'select[name="field_se_button_functionality"]'; //selector machine name here

        $element['field_se_event_id']['widget'][0]['value']['#states'] = [
            'required' => [
                $selector => [
                    ['value' => 'spotme'],
                    ['value' => 'teams'],
                ],
            ]
        ];
        
        $element['field_se_link_external']['widget'][0]['value']['#states'] = [
            'required' => [
                $selector => ['value' => 'link'],
            ]
        ];
    }
    switch ($context) {
        case 'node_event_form':
        case 'node_event_edit_form':
          $form['field_event_id']['#states'] = [
            'visible' => [
              ':input[name="field_spot_me_event[value]"]' => ['checked' => TRUE],
            ],
            'required' => [
              ':input[name="field_spot_me_event[value]"]' => ['checked' => TRUE],
            ],
          ];
          $form['field_event_id']['widget']['0']['value']['#states'] = [
            'required' => [
              ':input[name="field_spot_me_event[value]"]' => ['checked' => TRUE],
            ],
          ];
          if (isset($form['field_event_url_not_spotme'])) {
            $form['field_event_url_not_spotme']['#states'] = [
              'visible' => [
                ':input[name="field_spot_me_event[value]"]' => ['checked' => FALSE],
              ],
            ];
            $form['field_event_url_not_spotme']['widget']['0']['value']['#states'] = [
              'required' => [
                ':input[name="field_spot_me_event[value]"]' => ['checked' => FALSE],
              ],
            ];
          }
    
          $form['actions']['submit']['#submit'][] = '_callback_set_redirect_event';
    
          break;
      }
} 
function _callback_set_redirect_event($form, \Drupal\Core\Form\FormStateInterface $form_state) {
    $form_state->setRedirect('system.admin_content');
  }   
  function spotme_events_mail($key, &$message, $params) {
    $site_name = \Drupal::config('system.site')->get('name');
    $site_mail = \Drupal::config('system.site')->get('mail_notification');
  
    // If the custom site notification email has not been set, we use the site
    // default
    if (empty($site_mail)) {
      $site_mail = \Drupal::config('system.site')->get('mail');
    }
    if (empty($site_mail)) {
      $site_mail = ini_get('sendmail_from');
    }
  
    $token_service = \Drupal::token();
  
    $variables = [
      'user' => $params['account'],
      'node' => $params['event'],
    ];
  
    $token_options = [
      'callback' => 'spotme_events_mail_tokens',
      'clear' => TRUE,
    ];
  
    switch ($key) {
      case 'register_event_fail':
      case 'register_event_success':
        $config = \Drupal::config('spotme.mulesoft_api_config');
  
        $message['headers']['Reply-To'] = $site_mail;
        $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
        $message['headers']['From'] = $site_name . '<' . $site_mail . '>';
  
        $message['base_url'] = \Drupal::request()->getSchemeAndHttpHost();
        if ($key == 'register_event_success') {
          $message['subject'] .= \Drupal\Component\Render\PlainTextOutput::renderFromHtml($token_service->replace($config->get('register_event_success_template_subject'), $variables, $token_options));
          $message['body'][] = $token_service->replace($config->get('register_event_success_template_body'), $variables, $token_options);
        }
        else {
          $message['subject'] .= \Drupal\Component\Render\PlainTextOutput::renderFromHtml($token_service->replace($config->get('register_event_fail_template_subject'), $variables, $token_options));
          $message['body'][] = $token_service->replace($config->get('register_event_fail_template_body'), $variables, $token_options);
        }
  
        foreach ($message['body'] as $key => $body) {
          $message['body'][$key] = new \Drupal\Component\Render\FormattableMarkup($body, []);
        }
  
        break;
  
    }
  }
  function spotme_events_mail_tokens(&$replacements, $data, $options) {
    if (isset($data['node'])) {
      if (isset(\Drupal::config('system.date')->get('timezone')['default'])) {
        date_default_timezone_set(\Drupal::config('system.date')->get('timezone')['default']);
      }
      $replacements['[event:time_date]'] = date('H:i d-m-Y', strtotime($data['node']->field_start_at->value));
    }
  }
  function spotme_events_form_views_exposed_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
    if (in_array($form['#id'], [
      'views-exposed-form-webinar-export-page-1'
    ])) {
      if (isset($form['field_start_at_value_wrapper'])) {
        $form['field_start_at_value_wrapper']['field_start_at_value']['min']['#type'] = 'date';
        $form['field_start_at_value_wrapper']['field_start_at_value']['max']['#type'] = 'date';
      }
      $form['#attached']['library'][] = 'spotme_events/spotme_events.backend';
    }
  }
  function custom_filter_date_form_date($form, \Drupal\Core\Form\FormStateInterface $form_state) {
    $values = $form_state->getValues();
    if (isset($values['field_start_at_value']['max']) && $values['field_start_at_value']['max']) {
      $values['field_start_at_value']['max'] = $values['field_start_at_value']['max'] . ' 23:59:59';
      $form_state->set('field_start_at_value', $values['field_start_at_value']);
    }
  }
  function spotme_events_views_query_alter(ViewExecutable $view, \Drupal\views\Plugin\views\query\QueryPluginBase $query) {
    if (in_array($view->id(), ['webinar_export']) && in_array($view->current_display, [
        'page_1',
      ])) {
      foreach ($query->where[1]['conditions'] as $key => $where) {
        if (preg_match('/BETWEEN DATE_FORMAT/', $where['field'])) {
          $where['field'] = str_replace('\T%H:%i:%s', '', $where['field']);
          $where['field'] = str_replace('\T%H:%i:%s', '', $where['field']);
          $query->where[1]['conditions'][$key]['field'] = $where['field'];
        }
      }
    }
  }
  function spotme_events_preprocess_page(&$vars) {
    $route_name = \Drupal::routeMatch()->getRouteName();
    $config = \Drupal::config('spotme.mulesoft_api_config');
    if ($config->get('hide_past_events') && $route_name == 'view.webinar_event.past_event_page') {
      throw new NotFoundHttpException();
    }
  }
  function spotme_events_node_view_alter(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
    if ($entity->bundle() == 'event') {
      $build['#cache']['max-age'] = 0;
      \Drupal::service('page_cache_kill_switch')->trigger();
    }
  }
function spotme_events_cron(){
  $single_event_ids = \Drupal::entityQuery('node')->accessCheck(FALSE)->condition('type','single_event')->execute();
  $event_ids = \Drupal::entityQuery('node')->accessCheck(FALSE)->condition('type','event')->execute();
    if($single_event_ids){
    // Get the data from the module
    $config = \Drupal::config('event_registration.settings');

    // Set variables from module
    $stakeholder_email = $config->get('event_registration_stakeholder_email');

    if(empty($stakeholder_email)){
        \Drupal::logger('event_registration')->notice('Stakeholder email is empty!');
    }else{
        $database = \Drupal::database();

        $last_cron_exec = $database->select('email_cron_log', 'ecl')
        ->fields('ecl')
        ->orderBy('tid', 'DESC')
        ->range(0, 1)
        ->execute()
        ->fetchAll();
        
        $last_exec_timestamp = strtotime($last_cron_exec[0]->last_execution); //last time email was sent in seconds
        $cron_period = 259200; //period to limit cron email sending in seconds

        if( (time() - $last_exec_timestamp) > $cron_period ){
            \Drupal::service('event_registration.email_functions')->triggerTeamsEmail($stakeholder_email);
        }else{
            \Drupal::logger('event_registration')->notice('Email was send less than 3 days ago.');
        }
    }
  }
  if($event_ids){
    $config = \Drupal::service('config.factory')->getEditable('spotme.register_event_config');
    $data_register = $config->get('register_data') ?? [];
    if ($data_register) {
      $config_mule = \Drupal::service('config.factory')->getEditable('spotme.mulesoft_api_config');
      $webinar_system = $config_mule->get('webinar_system');
      $org_id = $config_mule->get('org_id');
      $combine_list = [];
      foreach ($data_register as $data) {
        $combine_list[$data['webinarId']]['attendeesList'][]= $data['user_data'];
        $combine_list[$data['webinarId']]['data_mca'][] = $data['data_mca'];
        $combine_list[$data['webinarId']]['nid'] = $data['nid'];
      }
      $data_push_to_api = [];
      foreach ($combine_list as $event_id => $item) {
        $data_push_to_api['data_mca'] = $item['data_mca'];
        $data_push_to_api['data_crm']['registerAttendees'] = [
          'orgId' => $org_id,
          'webinarSystem' => $webinar_system,
          'webinarId' => $event_id,
          'attendeesList' => $item['attendeesList'],
          'nid' => $item['nid'],
        ];
        $data_push_to_api['send_mail'] = TRUE;
        \Drupal::service('spotme_events_service')->registerEvent($data_push_to_api);
        sleep(1);
      }
      $config->set('register_data', [])->save();
    }
  }
}